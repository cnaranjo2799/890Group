#Exercise 9.2.1
library(tidyverse)

#Q1
ggplot(mpg, aes(x = hwy, y = displ)) + 
  geom_point(color = "pink", shape = 17)


#Q2
#This is because by including "color='blue'" in the aesthetic function, the fuction will try to map color according to the variable "blue," which does not exist. 
#To make the code result in a plat with blue points, we need to put "color='blue'" in a separate geom_point function.
ggplot(mpg, aes(x = displ, y = hwy)) + 
  geom_point(color = "blue")


#Q3
?geom_point
#For the shapes that have a border, we can use the stroke aesthetic to modify the width of the border.


#Q4
ggplot(mpg, aes(x = displ, y = hwy, color = displ < 5)) + 
  geom_point()
#By mapping an aesthetic to something other than a variable name, like color = displ < 5, the points' colors will vary depending on whether a datapoint's displ is greater than 5 or not. 

#Exercise 9.3.1 
 
 
#1.What geom would you use to draw a line chart? A boxplot? A histogram? An area chart? 
 
Line chart would use geom_line(), a boxplot would use geom_boxplot(), a histogram would use geom_histogram(), and an area chart would use geom_area(). 

 

#2. What does show.legend = FALSE do here? What happens if you remove it? Why do you think we used it earlier? 
 
show.legend = FALSE prevents the legend from being displayed. If you remove it, the legends will show up. I think that it was set to false just to save space! 

 

#3. What does the se argument to geom_smooth() do? 
 

Based on the ?geom_smooth documentation, the se argument tells the graph to either display or hide the confidence interval around the smooth function. This would depend on the type of smoothing performed (loess vs lm, etc.). 

 

#4. Recreate the R code necessary to generate the following graphs. Note that wherever a categorical variable is used in the plot, it’s drv. 
 
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 

  geom_point () + 

  geom_smooth (se = FALSE) 

 

## `geom_smooth()` using method = 'loess' and formula 'y ~ x' 

 

ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 

  geom_point () + 

  geom_smooth (aes(group = drv), se = FALSE) 

 

## `geom_smooth()` using method = 'loess' and formula 'y ~ x' 

 

ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + 

  geom_point () + 

  geom_smooth (se = FALSE) 

 

## `geom_smooth()` using method = 'loess' and formula 'y ~ x' 

 

ggplot(data = mpg, mapping = aes(x = displ, y = hwy, fill = drv)) + 

  geom_point (size = 3, shape = 21, stroke = 3, color = "white") 


# 9.4.1 (1-4) 

 

#1. What happens if you facet on a continuous variable? 


# When you run facet on a continuous variable, it generates numerous facets equal to the number of unique values of the facet variable. 
     

#2. What do the empty cells in the plot above with facet_grid(drv ~ cyl) mean? Run the following code. How do they relate to the resulting plot? 

 
  # In the facet_grid(drv ~ cyl), the empty cells show no observations for the specified combination of drive type and cylinder numbers (for example, 5 cyl 4 whl drive, 4 cyl rear wheel drive) 

   

 ggplot(mpg) +  

 geom_point(aes(x = drv, y = cyl)) 

 

  #additionally the missing observations in this graph relate to the earlier facet grid where blank values in the graph correspond to blank facets in the grid.  

           

#3. What plots does the following code make? What does it do? 

     

    ggplot(mpg) +  

    geom_point(aes(x = displ, y = hwy)) + 

    facet_grid(drv ~ .) 

  

  # the above code makes a facet with the facet rows as drive types, with no specified column facets 

      

  ggplot(mpg) +  

  geom_point(aes(x = displ, y = hwy)) + 

  facet_grid(. ~ cyl) 

  

  # the above code makes a facet with the facet columns as cylinder numbers, with no specified row facets 

   

  # the in the facet grid command leaves either the row or column blank as specified.  

    

#4. Take the first faceted plot in this section: 

     

    ggplot(mpg) +  

    geom_point(aes(x = displ, y = hwy)) +  

    facet_wrap(~ class, nrow = 2) 

   

#What are the advantages to using faceting instead of the color aesthetic? What are the disadvantages? How might the balance change if you had a larger dataset? 

  

    # The advantage of using faceting is that it allows for easier comparison when observation values are closer together, which could make a scatterplot look very cluttered and not easily inferable.  


#6. Read ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesn’t facet_grid() have nrow and ncol variables?

#The arguments nrow (ncol) determines the number of rows (columns) to use when laying out the facets. It is necessary since facet_wrap() only facets on one variable.

#The nrow and ncol arguments are unnecessary for facet_grid() since the number of unique values of the variables specified in the function determines the number of rows and columns.

#6 When using facet_grid() you should usually put the variable with more unique levels in the columns. Why?

#There will be more space for columns if the plot is laid out horizontally (landscape).




# Exercise 9.5.1
#Q1: What is the default geom associated with stat_summary()? How could you rewrite the previous plot to use that geom function instead of the stat function?

ggplot(data = diamonds) +
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )

#The arguments fun.ymin, fun.ymax, and fun.y have been deprecated and replaced with fun.min, fun.max, and fun in ggplot2 v 3.3.0. 
#The default geom for stat_summary() is geom_pointrange(). The default stat for geom_pointrange() is identity() but we can add the argument stat = "summary" to use stat_summary() instead of stat_identity().

#...
#Q2: What does geom_col() do? How is it different to geom_bar()?
# A: The geom_col() function has different default stat than geom_bar(). The default stat of geom_col() is stat_identity(), which leaves the data as is.
# A_Continued: The geom_col() function expects that the data contains x values and y values which represent the bar height.
#...
#Q3: Most geoms and stats come in pairs that are almost always used in concert. Read through the documentation and make a list of all the pairs. What do they have in common?
#A: The following tables list the pairs of geoms and stats that are used in concert.
...
| geom                       | stat                       |
|----------------------------|----------------------------|
| `geom_bar()`               | `stat_count()`             |
| `geom_bin2d()`             | `stat_bin_2d()`            |
| `geom_boxplot()`           | `stat_boxplot()`           |
| `geom_contour_filled()`    | `stat_contour_filled()`    |
| `geom_contour()`           | `stat_contour()`           |
| `geom_count()`             | `stat_sum()`               |
| `geom_density_2d()`        | `stat_density_2d()`        |
| `geom_density()`           | `stat_density()`           |
| `geom_dotplot()`           | `stat_bindot()`            |
| `geom_function()`          | `stat_function()`          |
| `geom_sf()`                | `stat_sf()`                |
| `geom_sf()`                | `stat_sf()`                |
| `geom_smooth()`            | `stat_smooth()`            |
| `geom_violin()`            | `stat_ydensity()`          |
| `geom_hex()`               | `stat_bin_hex()`           |
| `geom_qq_line()`           | `stat_qq_line()`           |
| `geom_qq()`                | `stat_qq()`                |
| `geom_quantile()`          | `stat_quantile()`          |

#Table: Complementary geoms and stats

#These pairs of geoms and stats tend to have their names in common, such `stat_smooth()` and `geom_smooth()`, and  be documented on the same help page.
#The pairs of geoms and stats that are used in concert often have each other as the default stat (for a geom) or geom (for a stat).
...
#Q4: What variables does stat_smooth() compute? What parameters control its behavior?
#A: The function stat_smooth() calculates the following variables:
#y: predicted value
#ymin: lower value of the confidence interval
#ymax: the upper value of the confidence interval
#se: standard error
#The “Computed Variables” section of the stat_smooth() documentation contains these variables.
...
#The parameters that control the behavior of stat_smooth() include
#method: the method used to
#formula: the formula are parameters such as method which determines which method is used to calculate the predictions and confidence interval, and some other arguments that are passed to that.
...
#Q5: In our proportion bar chart, we needed to set group = 1. Why? In other words, what is the problem with these two graphs?
#A: If group = 1 is not included, then all the bars in the plot will have the same height, a height of 1. The function geom_bar() assumes that the groups are equal to the x values since the stat computes the counts within the group.
#A_Continued: The following code will produce the intended stacked bar charts for the case with no fill aesthetic.
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
